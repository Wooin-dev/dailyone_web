name: Docker deploy

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Deploy
    runs-on: ubuntu-22.04

    steps:
      # (0) 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v4

      # (1) .env.production 생성
      - name: .env.production 생성
        run: |
           touch ./.env.production
           echo "${{secrets.ENV_PRODUCTION}}" > ./.env.production
        shell: bash

      # (2) 캐시생성
      # workflow가 실행될 때 필요한 파일 중에서 거의 바뀌지 않는 파일들을 GitHub의 캐시에 올려놓고 CI 서버로 내려받습니다.
      # 프로젝트에서 자주 바뀌지 않는 수많은 패키지를 매번 다운받아 올리면 시간도 오래걸리고 네트워크 대역폭을 많이 사용하게됩니다.
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # (3) 의존성 설치 후 빌드
      # DockerFile에서 빌드를 설정해두었으므로 생략
#      - name: Check Node v            # Node v 확인
#        run: node -v
#      - name: Install dependencies    # 의존 파일 설치
#        run: npm install
#      - name: Generate build          # React Build
#        run: npm run build

      # (4) Docker 이미지 생성 [option 태그추가시 - {이미지이름}:$(date +%s)]
      - name: Build the Docker image
        run: docker build --platform linux/amd64 -t donedev/dailyone-web .

      # (5) DockerHub 로그인
      - name: Docker Login
        uses: docker/login-action@v3.1.0
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}

      # (6) DockerHub에 퍼블리시. push
      - name: Docker push
        run: docker push donedev/dailyone-web

      # # (7) EC2접속 위한 AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      # 현재는 EC2인스턴스로 인바운드 규칙에 22포트 접근 모두 허용해둔 상태.
      # 키페어를 통해 접근하는 것이라 일정보안은 되지만
      # 추후 IAM사용자 등록후 github actions IP를 임시 등록 후 접근 하도록 변경 필요.
      #
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ap-northeast-2

      # (8) EC2접속해서 컨테이너 띄우기
      - name: SSH Remote Commands
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{secrets.EC2_HOST}}
          username: ${{secrets.EC2_USERNAME}}
          key: ${{secrets.EC2_KEY}}
          script: |
            docker stop $(docker ps -a -q --filter ancestor=donedev/dailyone-web) && docker rm $(docker ps -a -q --filter ancestor=donedev/dailyone-web)
            docker pull donedev/dailyone-web
            docker run -d -p 80:8080 --name dailyone-server donedev/dailyone-web
